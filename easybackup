#!/bin/bash

#    easybackup -- A rsync wrapper to easily perform backups of a set of
#    directories or files.
#    Copyright (C) 2016 Gabriele Russo Russo
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


# Terminate execution whenever accessing an unset variable
set -o nounset

# Flag for verbose operation
VERBOSE_FLAG=0


# Adds trailing slash to given path (if missing) and writes it to output.
# Param: $1 -> path
#
add_trailing_slash()
{
	local path="$1"
	[[ ! "${path}" =~ /$ ]] && echo "${path}/" || echo "${path}"
}


# Checks that given path is a valid source path.
# We require an absolute path.
# 
# Param: $1 -> path
#
check_source_path()
{
	local src="$1"

	# Check that path is absolute
	if [[ ! "${src:0:1}" == "/" && ! "${src:0:1}" == '~' ]]; then
		echo "Given source path is not an absolute path: ${src} (skipped)" >&2
		return 1
	fi

	return 0
}

# Reads list of source paths and writes to output path of valid ones.
# 
# Param: $1 -> file containing list of paths
#
read_source_paths()
{
	local src_file="${1}"
	
	while read -r src_line;
	do
		# Check that line is a valid directory path and outputs it
		check_source_path "${src_line}" && add_trailing_slash "${src_line}"
	done < "${src_file}"
}

# rsync wrapper
# Param: $1 -> array of paths to backup
# Param: $2 -> backup destination directory
# Param: $3 -> file containing patterns to be excluded
#
rsync_local()
{
	local srcs=("${!1}")
	local dst="${2}"
	local exclude_from_file="${3}"

	if [[ $VERBOSE_FLAG -ne 0 ]]; then
		rsync -aShR --delete --progress --exclude-from "${exclude_from_file}" "${srcs[@]}" "${dst}"
	else
		rsync -aShR --delete --exclude-from "${exclude_from_file}" "${srcs[@]}" "${dst}"
	fi
}

# rsync wrapper
# Param: $1 -> array of paths to backup
# Param: $2 -> backup destination directory
# Param: $3 -> file containing patterns to be excluded
# Param: $4 -> hostname prefix for destination directory path
#
rsync_remote()
{
	local srcs=("${!1}")
	local dst="${2}"
	local exclude_from_file="${3}"
	local host_prefix="${4}"

	if [[ $VERBOSE_FLAG -ne 0 ]]; then
		rsync -aShR --delete --progress -e ssh --exclude-from "${exclude_from_file}" "${srcs[@]}" "${host_prefix}${dst}"
	else
		rsync -aShR --delete -e ssh --exclude-from "${exclude_from_file}" "${srcs[@]}" "${host_prefix}${dst}"
	fi
}


# Performs backup of all specified source paths.
# Param: $1 -> file containing source paths (absolute paths)
# Param: $2 -> backup destination directory
# Param: $3 -> file containing patterns to be excluded
# Param: $4 -> username to use for remote backup
# Param: $5 -> (optional) hostname to use for remote backup
#
backup_all_sources()
{
	local src_file="${1}"
	local dst="${2}"
	local excluded_patterns_file="${3}"
	local user="${4}"
	local host="${5:-}"
	local source_paths=()
	local host_prefix=""

	# Reads list of source paths and stores them into an array
	local tmp_ifs=$IFS
	IFS=$'\n' source_paths+=( $(read_source_paths "$src_file") )
	IFS=$tmp_ifs

	# Checks that at least one valid source exists
	if [[ ${#source_paths[@]} -lt 1 ]]; then
		echo "No files to backup." >&2
		exit 5
	fi

	echo "Running backup..."

	# Runs rsync
	if [[ "x${host}" != "x" ]]; then
		[[ ${user} == "${USER}" ]] && host_prefix="${host}:" || host_prefix="${user}@${host}:"
		rsync_remote source_paths[@] "${dst}" "${excluded_patterns_file}" "${host_prefix}" 
	else
		rsync_local source_paths[@] "${dst}" "${excluded_patterns_file}"
	fi

	if [[ $? -ne 0 ]]; then
		echo "+++ BACKUP FAILED!" >&2
		exit 2
	fi
	echo "Done."

	return 0 
}

# Checks if given destination directory is suitable for performing backup.
# We check if backup destination directory exists. If it does not, we try to
# create it. 
# We also check that script has write permissions on that directory.
#
# Param: $1 -> destination directory path
#
check_local_destination()
{
	local dst=${1}

	# Checks for directory existence
	if [[ ! -d ${dst} ]]; then
		echo "Creating destination directory: ${dst}"
		if  ! mkdir -p "${dst}"; then
			echo "[ERROR] Could not create destination directory!" >&2
			return 1
		fi
	fi

	# Checks for write permissions 
	if [[ ! -w ${dst} ]]; then
		echo "[ERROR] You have not write permissions on destination directory!" >&2
		return 1
	fi

	return 0
}

# Prints usage line.
# Param: $1 -> script name
#
_usage()
{
	local progname="$1"
	echo "Usage: ${progname} -s <list file> -d <destination directory> [-v] [-e <excluded patterns file>] [-r <remote host> [-u <remote user>]]"
}

# Prints brief usage information.
# Param: $1 -> script name
#
usage()
{
	local progname="$1"

	_usage "${progname}"
	echo "Use -h for requesting full help."
}

# Prints help.
# Param: $1 -> script name
# 
help()
{
	local progname="$1"	
	_usage "${progname}"

	cat << EOS

A simple 'rsync' wrapper script for performing an incremental backup of a set of 
directories or files to a specified location (e.g. an external storage device or
a remote server via SSH).

The list of directories to be included in backup is provided through a "sources"
file. The destination for backup is specified as an argument. In this
destination directory, the entire directory hierarchy for selected folders is
created.

If a remote backup is to be run, user has to specify the host and (optionally)
the username for establishing a SSH connection.

PARAMETERS:
-s <source list file> = file containing the list of directories and files to be
				included in backup. Absolute paths are required,
				one per line.
-d <destination directory>   = directory for storing backup

-e <excluded patterns file>  = (optional) file containing a list of patterns to
                               be excluded from backup (e.g. '*/.git/*')

-r <remote host>             = (optional) host for remote backup via SSH
-u <remote user>             = (optional) username for remote backup via SSH.
                               If a remote user is not specified but a remote
        		       backup is performed, SSH login is attemted using
        		       current username.

-v                           = (optional) verbose output; prints details about
                               transferred files

EXAMPLE:
Assuming that 'backup_directories.txt' is a regular file containing these lines:

	/home/user/music/
	/home/user/pictures/

following command will perform a backup of these directories to '/mnt/external/':
	
	$ easybackup -s backup_directories.txt -d /mnt/external

The resulting directory hierarchy under '/mnt/external':

	/mnt/external/
		|---- home/
		          |--- user/
			         |--- music/
				        |---- ...
				        |---- ...
			         |--- pictures/
				        |---- ...
				        |---- ...
EOS
}


main()
{
	local src_file=''
	local exclude_file=''
	local destination=''
	local remote_host=''
	local remote_user=''

	# Parses CLI options
	while getopts ":s:r:u:e:d:hv" opt; do
		case $opt in
			h)
				help "$(basename "$0")"
				exit 0
				;;
			v)
				VERBOSE_FLAG=1
				;;
			s)
				src_file="${OPTARG}"
				;;
			d)
				destination="${OPTARG}"
				;;
			e)
				exclude_file="${OPTARG}"
				;;
			r)
				remote_host="${OPTARG}"
				;;
			u)
				remote_user="${OPTARG}"
				;;
			\?)
				echo "Invalid option: -$OPTARG" >&2
				usage "$(basename "$0")"
				exit 1
				;;
			:)
				echo "Option -$OPTARG requires an argument." >&2
				usage "$(basename "$0")"
				exit 1
				;;
		esac
	done

	# Check that a sources file and a destination directory have been provided
	if [[ "x$src_file" == "x" || "x$destination" == "x" ]]; then
		usage "$(basename "$0")"
		exit 1
	fi

	# Check that a valid destination directory has been specified.
	# (We do NOT perform this check in case of remote backup)
	#
	if [[ "x$remote_host" == "x" ]] && ! check_local_destination "${destination}"; then
		exit 3
	fi

	# Check that excluded patterns file (if specified) exists
	if [[ "x$exclude_file" != "x" && ! -f $exclude_file ]]; then
		usage "$(basename "$0")"
		exit 4
	fi

	backup_all_sources "${src_file}" "${destination}" "${exclude_file:-/dev/null}" "${remote_user:-$USER}" "${remote_host}"
	exit $?
}

main "${@}"
